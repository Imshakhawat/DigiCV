// <auto-generated />
using System;
using CVBuilder.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CVBuilder.web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("CGPA")
                        .HasColumnType("float");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeDataId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.ItemLists.SkillListItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillsSectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillsSectionId");

                    b.ToTable("SkillListItems");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.ItemLists.TrainingListItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingSectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingSectionId");

                    b.ToTable("TrainingListItems");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.ItemLists.WorkExperienceDescriptionItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkExperiencId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkExperiencId");

                    b.ToTable("WorkExperienceDescriptionItems");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectsSectionId")
                        .HasColumnType("int");

                    b.Property<string>("TechStack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectsSectionId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeDataId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LinkOrText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("introductionSectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("introductionSectionId");

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CVTemplateId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ResumeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeTemplteId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ResumeData");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.ResumeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateThumbNailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResumeTemplates");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.IntroductionSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeDataId")
                        .IsUnique();

                    b.ToTable("IntroductionSections");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.LanguageFrameworkSkillsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ResumeDataId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeDataId")
                        .IsUnique();

                    b.ToTable("LanguageFrameworkSkillsSections");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProfessionalSummarySection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CVTemplateId")
                        .IsUnique();

                    b.ToTable("ProfessionalSummarySections");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProfessionalTrainingSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ResumeDataId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeDataId")
                        .IsUnique();

                    b.ToTable("ProfessionalTrainingSections");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProjectsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ResumeDataId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeDataId")
                        .IsUnique();

                    b.ToTable("ProjectsSections");
                });

            modelBuilder.Entity("CVBuilder.Domain.Entities.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CVBuilder.Domain.Entities.UserCoverLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Footer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HiringBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserCoverLetters");
                });

            modelBuilder.Entity("CVBuilder.Persistence.Features.Membership.ApplicationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ApplicationClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Admin",
                            ClaimValue = "Add User",
                            CreateDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4559),
                            ModifyDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4567)
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Admin",
                            ClaimValue = "Edit User",
                            CreateDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4572),
                            ModifyDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4574)
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Admin",
                            ClaimValue = "Delete User",
                            CreateDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4578),
                            ModifyDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4579)
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Admin",
                            ClaimValue = "Get User",
                            CreateDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4582),
                            ModifyDate = new DateTime(2023, 10, 27, 15, 57, 3, 126, DateTimeKind.Utc).AddTicks(4584)
                        });
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c81d000c-5fb1-47b7-addf-f0c73faebebc"),
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = new Guid("abcd000c-5fb1-47b7-addf-f0c73faebabc"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("MailSendStatus")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a41d000c-5fb1-47b7-addf-f0c73faebeea"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad102286-a410-48e0-8fcd-073c1b973a78",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jhon",
                            LastName = "Deo",
                            LockoutEnabled = false,
                            MailSendStatus = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECzWHdMekbnkrHzvome0wL4z9X2aArsIYj5xsjNy0rtYfmeXE9osTPTpIJFKwCPk/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Admin",
                            ClaimValue = "Add User",
                            UserId = new Guid("a41d000c-5fb1-47b7-addf-f0c73faebeea")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Admin",
                            ClaimValue = "Edit User",
                            UserId = new Guid("a41d000c-5fb1-47b7-addf-f0c73faebeea")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Admin",
                            ClaimValue = "Delete User",
                            UserId = new Guid("a41d000c-5fb1-47b7-addf-f0c73faebeea")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Admin",
                            ClaimValue = "Get User",
                            UserId = new Guid("a41d000c-5fb1-47b7-addf-f0c73faebeea")
                        });
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a41d000c-5fb1-47b7-addf-f0c73faebeea"),
                            RoleId = new Guid("c81d000c-5fb1-47b7-addf-f0c73faebebc")
                        });
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.Education", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "ResumeData")
                        .WithMany("Education")
                        .HasForeignKey("ResumeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeData");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.ItemLists.SkillListItems", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Sections.LanguageFrameworkSkillsSection", "SkillsSection")
                        .WithMany("SkillsList")
                        .HasForeignKey("SkillsSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillsSection");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.ItemLists.TrainingListItems", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Sections.ProfessionalTrainingSection", "TrainingSection")
                        .WithMany("TrainingItemList")
                        .HasForeignKey("TrainingSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingSection");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.ItemLists.WorkExperienceDescriptionItems", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.BaseEntites.WorkExperience", "WorkExperience")
                        .WithMany("DescriptionItems")
                        .HasForeignKey("WorkExperiencId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.Project", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Sections.ProjectsSection", "ProjectsSection")
                        .WithMany("ProjectItems")
                        .HasForeignKey("ProjectsSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectsSection");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.Reference", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "ResumeData")
                        .WithMany("References")
                        .HasForeignKey("ResumeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeData");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.SocialMedia", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Sections.IntroductionSection", "introductionSection")
                        .WithMany("SocialMediaList")
                        .HasForeignKey("introductionSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("introductionSection");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.WorkExperience", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "CVTemplate")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("CVTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVTemplate");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.IntroductionSection", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "ResumeData")
                        .WithOne("Introduction")
                        .HasForeignKey("CVBuilder.Domain.CVEntites.Sections.IntroductionSection", "ResumeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeData");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.LanguageFrameworkSkillsSection", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "ResumeData")
                        .WithOne("Skills")
                        .HasForeignKey("CVBuilder.Domain.CVEntites.Sections.LanguageFrameworkSkillsSection", "ResumeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeData");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProfessionalSummarySection", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "CVTemplate")
                        .WithOne("ProfessionalSummary")
                        .HasForeignKey("CVBuilder.Domain.CVEntites.Sections.ProfessionalSummarySection", "CVTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVTemplate");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProfessionalTrainingSection", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "ResumeData")
                        .WithOne("ProfessionalTraining")
                        .HasForeignKey("CVBuilder.Domain.CVEntites.Sections.ProfessionalTrainingSection", "ResumeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeData");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProjectsSection", b =>
                {
                    b.HasOne("CVBuilder.Domain.CVEntites.Resume", "ResumeData")
                        .WithOne("Projects")
                        .HasForeignKey("CVBuilder.Domain.CVEntites.Sections.ProjectsSection", "ResumeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeData");
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Crud.Persistance.Features.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserClaim", b =>
                {
                    b.HasOne("Crud.Persistance.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserLogin", b =>
                {
                    b.HasOne("Crud.Persistance.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserRole", b =>
                {
                    b.HasOne("Crud.Persistance.Features.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crud.Persistance.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crud.Persistance.Features.Membership.ApplicationUserToken", b =>
                {
                    b.HasOne("Crud.Persistance.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.BaseEntites.WorkExperience", b =>
                {
                    b.Navigation("DescriptionItems");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Resume", b =>
                {
                    b.Navigation("Education");

                    b.Navigation("Introduction")
                        .IsRequired();

                    b.Navigation("ProfessionalSummary")
                        .IsRequired();

                    b.Navigation("ProfessionalTraining")
                        .IsRequired();

                    b.Navigation("Projects")
                        .IsRequired();

                    b.Navigation("References");

                    b.Navigation("Skills")
                        .IsRequired();

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.IntroductionSection", b =>
                {
                    b.Navigation("SocialMediaList");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.LanguageFrameworkSkillsSection", b =>
                {
                    b.Navigation("SkillsList");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProfessionalTrainingSection", b =>
                {
                    b.Navigation("TrainingItemList");
                });

            modelBuilder.Entity("CVBuilder.Domain.CVEntites.Sections.ProjectsSection", b =>
                {
                    b.Navigation("ProjectItems");
                });
#pragma warning restore 612, 618
        }
    }
}
